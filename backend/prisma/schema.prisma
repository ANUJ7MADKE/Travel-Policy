// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Department {
  NULL
  COMPS
  IT
  MECH
  AIDS
  EXTC
  ETRX
  RAI
}

enum Designation {
  FACULTY
  HOD
  HOI
  SECRETARY
  VC
  FINANCE
}

enum Institution {
  KJSCE
}

enum ApplicationStatus {
  REJECTED
  ACCEPTED
  PENDING
}

// enum ExpenseType {
//   TRAVEL
//   LODGING
//   BOARDING
//   LOCAL_CONVEYANCE
//   MISCELLANEOUS
// }

model User {
  userId      String      @id @default(uuid())
  userName    String
  email       String      @unique @db.Text
  password    String

  institution Institution
  department  Department
  designation Designation

  // Applications initiated by the user
  applicationsByUser Application[] @relation("ApplicantApplications")

  // Applications assigned to the user for validation
  applicationsToValidate Application[] @relation("ValidatorsApplications")

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Application {
  applicationId String          @id @default(uuid())
  applicantName String

  // Applicant (User) relationship
  applicant   User?            @relation("ApplicantApplications", fields: [applicantId], references: [userId])
  applicantId String?

  // Form data in JSON format
  formData    Json

  // Validation steps
  hodValidation ApplicationStatus?
  hoiValidation ApplicationStatus?
  adminApproval ApplicationStatus?
  financeApproval ApplicationStatus?

  // Feedback for rejection
  rejectionFeedback String?

  // Proofs and supporting documents
  proofOfTravel        Bytes?
  proofOfAccommodation Bytes?
  proofOfAttendance    Bytes?
  expenseProof0        Bytes?
  expenseProof1        Bytes?
  expenseProof2        Bytes?
  expenseProof3        Bytes?
  expenseProof4        Bytes?
  expenseProof5        Bytes?
  expenseProof6        Bytes?
  expenseProof7        Bytes?
  expenseProof8        Bytes?
  expenseProof9        Bytes?

  // Validators assigned to the application
  validators User[]             @relation("ValidatorsApplications")

  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([applicantId])
}
